attribute  vec4 vPosition;
attribute  vec4 vNormal;
varying vec4 fColor;

uniform vec4 ambientProduct; 
uniform vec4 diffuseProduct;
uniform vec4 specularProduct;
uniform float shininess;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 normalMatrix;

uniform vec4 lightPosition;

void main()
{
    vec3 pos = -(modelViewMatrix * vPosition).xyz;
    
    // fixed light postion
    vec3 light = lightPosition.xyz;
    vec3 L = normalize( light - pos );

    vec3 E = normalize( -pos );
    vec3 H = normalize( L + E );

    // transform vertex normal into eye coordinates
    vec3 N = normalize( (normalMatrix * vNormal).xyz );

    // compute terms in the illumination equation
    vec4 ambient = ambientProduct;

    float Kd = max( dot(L, N), 0.0 );
    vec4  diffuse = Kd * diffuseProduct;

    float Ks = pow( max(dot(N, H), 0.0), shininess );
    vec4  specular = Ks * specularProduct;
    
    if ( dot(L, N) < 0.0 ) {
	   specular = vec4(0.0, 0.0, 0.0, 1.0);
    } 

    gl_Position = projectionMatrix * modelViewMatrix * vPosition;
    
    fColor = ambient + diffuse + specular;
    
    fColor.a = 1.0;
}